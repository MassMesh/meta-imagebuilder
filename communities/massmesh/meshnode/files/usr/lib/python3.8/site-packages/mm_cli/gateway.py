from argh import arg, wrap_errors
import socket
import subprocess
from . import util

@arg('client_pub_key', help='public key of the client')
@arg('client_ip', help='client tunnel ip')
@wrap_errors([socket.error, IOError])
def addclient(client_pub_key, client_ip):
    'add a client ip reservation'
    util.addremotesubnet(client_ip + "/32", client_pub_key) # add client ip to ygg running config
    util.gateway_provision()

@arg('--foreground', help='run daemon in foreground')
@arg('--killall', help='kill all existing daemons')
@wrap_errors([socket.error, IOError])
def server(foreground=False, killall=False):
    if killall:
        print('...Killed')
        start=subprocess.Popen('kill -9 $(ps w| grep [p]ython3 | grep netdaemon | awk \'{print $1}\') 2>/dev/null', shell=True)
        return

    if foreground:
        print('foreground', foreground)
        start=subprocess.Popen(["/usr/bin/netdaemon.py"], shell=True)
        print(start.communicate())

    else:
        start=subprocess.Popen(["/usr/bin/netdaemon.py"], shell=False)
        print("Starting gateway server...")



cmd = [addclient, server]
