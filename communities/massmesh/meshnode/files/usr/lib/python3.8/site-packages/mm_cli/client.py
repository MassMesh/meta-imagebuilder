from argh import arg, wrap_errors
import socket
import json
import urllib.parse
import urllib.request

from . import util
import subprocess

@arg('gateway_pub_key', help='public key of the gateway')
@arg('client_ip', help='client tunnel ip')
@arg('gateway_ip', help='gateway tunnel ip')
@wrap_errors([socket.error, IOError])
def setgateway(gateway_pub_key, client_ip, gateway_ip):
    'initiate the gateway configuration'
    subprocess.run(["uci", "set", "system.gateway=gateway"])
    subprocess.run(["uci", "set", "system.gateway.key=" + gateway_pub_key])
    subprocess.run(["uci", "set", "system.gateway.cl_ip=" + client_ip])
    subprocess.run(["uci", "set", "system.gateway.gw_ip=" + gateway_ip])
    subprocess.run(["uci", "commit"])
    util.client_provision()

@wrap_errors([socket.error, IOError])
def provision():
    'provision the gateway configuration using saved settings'
    util.client_provision()


@arg('gateway_pub_key', help='public key of the gateway')
@wrap_errors([socket.error, IOError])
def renew(gateway_pub_key):
    'renew the lease with gateway'

    ## getSelf: box_pub_key
    getself = subprocess.run(["uci", "get", "yggdrasil.yggdrasil.EncryptionPublicKey"], capture_output=True)
    self_box_pub_key = getself.stdout.decode("utf-8").replace("\n", "")
    print('self_box_pub_key', self_box_pub_key)

    ## Gateway: via input: box_pub_key
    gateway_addr = subprocess.check_output([ 'yggdrasil', "-address", "-useconf"],
                    input=bytes(json.dumps({'EncryptionPublicKey': gateway_pub_key}), 'utf-8'))
    gateway_addr = gateway_addr.decode('utf-8').replace("\n", "")
    url_base = 'http://[' + gateway_addr + ']:1617'
    print('gateway_addr', gateway_addr)


    ## Recreate Database
    url = url_base + '/wip_make_pool_database'
    urllib.request.urlopen(url)

    ## /register: get a new network
    url = url_base + '/wip_make_register'
    data = urllib.parse.urlencode({'box_pub_key': self_box_pub_key.replace("\\n", "")})
    data = data.encode('utf-8')

    with urllib.request.urlopen(url, data) as f:
        res = json.loads(f.read().decode('utf-8'))

    gateway = res['gateway']
    citizen = res['citizen'] + '/' + res['pfxlen']

    ## /renew: set a new network
    setgateway(gateway_pub_key, client_ip=citizen, gateway_ip=gateway)


    print('Renew: EOF')
    # util.client_provision()


cmd = [setgateway, provision, renew]
