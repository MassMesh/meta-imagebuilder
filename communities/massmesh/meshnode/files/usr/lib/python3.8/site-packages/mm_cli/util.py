import subprocess

def client_provision():
    gateway_pub_key = subprocess.run(["uci", "get", "system.gateway.key"], capture_output=True)
    client_ip = subprocess.run(["uci", "get", "system.gateway.cl_ip"], capture_output=True)
    gateway_ip = subprocess.run(["uci", "get", "system.gateway.gw_ip"], capture_output=True)
    wan_gw = subprocess.run("ubus call network.interface.wan status | jq .route[0].nexthop", shell=True, capture_output=True)

    if (gateway_pub_key.returncode == 0 and gateway_pub_key.stdout.strip()
       and client_ip.returncode == 0 and client_ip.stdout.strip()
       and gateway_ip.returncode == 0 and gateway_ip.stdout.strip()
       and wan_gw.returncode == 0 and wan_gw.stdout.strip()):
        addip(client_ip.stdout.strip(), "ygg0") # Add gateway_ip to ygg iface
        addremotesubnet("0.0.0.0/0", gateway_pub_key.stdout.strip().decode("utf-8")) # add remote subnet to ygg running config

        # fixme: get this list dynamically from ygg conf
        # fixme: wan_gw is null when no wan, we should not rely on this
        wan_gw = ("127.0.0.1" if wan_gw.stdout.strip().decode("utf-8") == "null" else wan_gw.stdout.strip().decode("utf-8"))
        addroute("50.236.201.218", wan_gw) # for each peer, add bypass route
        addroute("45.76.166.128", wan_gw) # for each peer, add bypass route
        addroute("45.77.107.150", wan_gw) # for each peer, add bypass route
        addroute("108.175.10.127", wan_gw) # for each peer, add bypass route
        addroute("198.58.100.240", wan_gw) # for each peer, add bypass route
        setdefaultroute(gateway_ip.stdout.strip()) # set default route to gateway_ip
    else:
        print("some error in client_provision")



def gateway_provision():
    print("fixme: gateway_provision")
    util.addip() # add gateway ip to ygg interface if not already set

def addroute(dest, gateway):
    subprocess.run(["ip", "ro", "repl", dest, "via", gateway])

def setdefaultroute(gateway):
    subprocess.run(["ip", "ro", "repl", "default", "via", gateway])

def addip(ip, iface):
    subprocess.run(["ip", "addr", "repl", ip, "dev", iface])

def addremotesubnet(subnet, pubkey):
    # fixme: this will error but shouldn't break when run repeatedly. Add a check for the subnet before trying to add it
    subprocess.run(["yggdrasilctl", "addremotesubnet", "subnet=" + subnet, "box_pub_key=" + pubkey])
