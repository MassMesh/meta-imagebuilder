#!/usr/bin/env bash
#
# based on https://github.com/openwrt/packages/blob/master/.travis_do.sh

ROOT_DIR="$PWD"			# where the script is
DISTRO="${DISTRO:-openwrt}"	# the folder where to store created files
VERSION="${VERSION:-18.06.2}"   # default version
IB_VERSION="${IB_VERSION:-$VERSION}" # ImageBuilder version if different to distro version
BASE_URL="${BASE_URL:-https://downloads.openwrt.org}" 	# download imagebuilders
BASE_PATH="$DISTRO/$VERSION/$TARGET" 	        # structure for storing stuff

# If /dev/shm is mounted noexec, then <Use/Avoid> building in RAM
if [ $(mktemp -p /dev/shm/ 2>/dev/null) ] \
&& [ x"$(mount | grep '/dev/shm type tmpfs' | grep -q 'noexec'; echo $?)" == x"0" ]
then
	# Avoid: /dev/shm: tmpfs mounted with noexec
	IB_DIR="$ROOT_DIR/imagebuilder/$BASE_PATH"
else
	# Use: tmpfs yields faster buildtimes
	IB_DIR="/dev/shm/imagebuilder/$BASE_PATH"
fi

echo IB_DIR==${IB_DIR}
BIN_DIR="${BIN_DIR:-$ROOT_DIR/bin/$BASE_PATH}"  # where to store created images
IB="imagebuilder"   # search sha256sums for this string to find imagebuilder
BUILD_KEY="${BUILD_KEY:-$ROOT_DIR/key-build}"
ARIA2C="$(which aria2c)"

set -e


[ "$IB_VERSION" != "snapshots" ] && {
	TARGETS_URL="$BASE_URL/releases/$IB_VERSION/targets/$TARGET"
} || {
	TARGETS_URL="$BASE_URL/snapshots/targets/$TARGET"
}

# parse the sha256sums file to determine the ImageBuilder name
get_ib_archive_name() {
	if [ -e "$IB_DIR/sha256sums" ] ; then
		grep -- "$IB" "$IB_DIR/sha256sums" | awk '{print $2}' | sed -e "s/*//g"
	else
		false
	fi
}

# return the architecture of the ImageBuilder based on .config contents
get_ib_arch() {
	[ -d "$IB_DIR" ] && {
		(cd "$IB_DIR" &&
			grep CONFIG_TARGET_ARCH_PACKAGES .config | cut -d= -f2 | tr -d \"
		)
	} || echo "unknown"
}

meta_setup() {
	# LEDE Build System (LEDE GnuPG key for unattended build jobs)
	gpg --import "$ROOT_DIR/keys/626471F1.asc"
	echo '54CC74307A2C6DC9CE618269CD84BCED626471F1:6:' | gpg --import-ownertrust
	# LEDE Release Builder (17.01 "Reboot" Signing Key)
	gpg --import $ROOT_DIR/keys/D52BBB6B.asc
	echo 'B09BE781AE8A0CD4702FDCD3833C6010D52BBB6B:6:' | gpg --import-ownertrust
	# OpenWrt Release Builder (18.06 Signing Key)
	gpg --import $ROOT_DIR/keys/17E1CE16.asc
	echo '6768C55E79B032D77A28DA5F0F20257417E1CE16:6:' | gpg --import-ownertrust

	touch "$ROOT_DIR/.meta_setup"
}

download() {
	mkdir -p "$IB_DIR"
	[ -h $(echo $TARGET | cut -d/ -f2) ] \
		&& rm $(echo $TARGET | cut -d/ -f2) \
		|| : # always re-symlink
	ln -s "$IB_DIR" .
	cd "$IB_DIR" || exit

	echo "download checksums and signature"
	if [ x"$ARIA2C" == "x" ]; then
		which wget 2>&1>/dev/null
		if [ $? -eq 0 ]; then
			wget "$TARGETS_URL/sha256sums" -O sha256sums
			wget "$TARGETS_URL/sha256sums.gpg" -O sha256sums.asc
		else
			die "please install wget or aria2c for downloading"
		fi

	else
		aria2c "$TARGETS_URL/sha256sums" -o sha256sums --force-save=true
		aria2c "$TARGETS_URL/sha256sums.gpg" -o sha256sums.asc --force-save=true
	fi

	echo "verifying sha256sums signature"
	gpg --verify sha256sums.asc
	echo "verified sha256sums signature."
	if ! grep -- "$IB" sha256sums > sha256sums.small ; then
		die "can not find $IB file in sha256sums. Is \$IB out of date?"
	fi

	touch sha256sums.current
	# if missing, outdated or invalid, download again
	if [ "$(cat sha256sums.small)" != "$(cat sha256sums.current)" ] ; then
		local ib_archive_name
		ib_archive_name="$(get_ib_archive_name)"
		echo "sha256 doesn't match or ImageBuilder file wasn't downloaded yet."
		echo "remove outdated ImageBuilder files"
		find . ! -name 'sha256sums.*' -type f -exec rm -f {} +
		echo "download ImageBuilder"
		if [ x"$ARIA2C" == "x" ]; then
			wget "$TARGETS_URL/$ib_archive_name" -O "$ib_archive_name"
		else
			aria2c "$TARGETS_URL/$ib_archive_name" -o "$ib_archive_name" \
				--force-save=true --summary-interval=1
		fi

		xz --threads=$(grep ^processor /proc/cpuinfo | wc -l) \
		   --decompress --stdout "$IB_DIR/$ib_archive_name" \
		| tar x --strip=1 --overwrite
		# add Makefile which support package_list and  manifest
		# also modify Makefile based on DISTRO and VERSION
		# if REPOS is defiend, add them
		[ -n "$REPOS" ] && custom_repos

		# check again and fail here if the file is still bad
		echo "Checking sha256sum a second time"
		if ! sha256sum -c ./sha256sums.small ; then
			die "ImageBuilder can not be verified!"
		fi
		mv sha256sums.small sha256sums.current
		if [ -n "$KEEP_IB_TAR" ]; then
			:
		elif [ -d "$IB_DIR/$ib_archive_name" ]; then
			rm -rf "$IB_DIR/$ib_archive_name"
		fi
	fi

	# copy BUILD_KEY to imagebuilder folder to sign images
	[ -e "$BUILD_KEY" ] && ln -sf "$BUILD_KEY" "$IB_DIR/key-build"
	[ -e "$BUILD_KEY.ucert" ] && ln -sf "$BUILD_KEY.ucert" "$IB_DIR/key-build.ucert"

	echo "ImageBuilder is up-to-date"
}

custom_repos() {
	# ability to add custom repositories
	echo "$REPOS" > "$IB_DIR/repositories.conf"
	sed -i \
		-e "s/{{ pkg_arch }}/$(get_ib_arch)/" \
		-e "s#{{ target }}#$TARGET#" \
		-e "s/{{ ib_version }}/${IB_VERSION:-$VERSION}/" \
		-e "s/{{ version }}/$VERSION/" \
		"$IB_DIR/repositories.conf"
}

die() {
	echo $1
	exit 1
}

# setup this meta script if not already done
[ ! -d "$ROOT_DIR/.meta_setup" ] && meta_setup

# check if required vars a given
[ -n "$TARGET" ] || die "missing \$TARGET"

# check if local state is up to date
[ -n "$NO_DOWNLOAD" ] || download 1>&2

# will stop here if command is download
[ "$1" != "download" ] || exit 0

# run `make image` and pass variables
(cd "$IB_DIR" &&
make "$1" \
	PROFILE="$PROFILE" \
	PACKAGES="$PACKAGES" \
	BIN_DIR="$BIN_DIR" \
	EXTRA_IMAGE_NAME="$EXTRA_IMAGE_NAME" \
	DISABLED_SERVICES="$DISABLED_SERVICES" \
	FILES="$FILES"
)
