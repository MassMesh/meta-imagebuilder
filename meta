#!/bin/sh
#
# based on https://github.com/openwrt/packages/blob/master/.travis_do.sh

set -e

ROOT_DIR="$PWD"                 # where the script is
DISTRO="${DISTRO:-openwrt}"     # the folder where to store created files
RELEASE="${RELEASE:-17.01.5}"   # default release
BASE_URL="${BASE_URL:-https://downloads.openwrt.org}" # download imagebuilders
BASE_PATH="$DISTRO/$RELEASE/$TARGET/$SUBTARGET" # structure for storing stuff
IB_DIR="$ROOT_DIR/imagebuilder/$BASE_PATH"      # where to store imagebuilders
BIN_DIR="${BIN_DIR:-$ROOT_DIR/bin/$BASE_PATH}"  # where to store created images
IB="imagebuilder"   # search sha256sums for this string to find imagebuilder


[ "$RELEASE" != "snapshots" ] && [ -z "$SNAPSHOTS" ] && {
    TARGETS_URL="$BASE_URL/releases/$RELEASE/targets/$TARGET/$SUBTARGET"
} || {
    TARGETS_URL="$BASE_URL/snapshots/targets/$TARGET/$SUBTARGET"
    RELEASE="snapshots"
    SNAPSHOTS=1
}

echo_red()   { printf "\033[1;31m$*\033[m\n"; }
echo_green() { printf "\033[1;32m$*\033[m\n"; }
echo_blue()  { printf "\033[1;34m$*\033[m\n"; }


get_ib_file() {
	if [ -e "$IB_DIR/sha256sums" ] ; then
		grep -- "$IB" "$IB_DIR/sha256sums" | awk '{print $2}' | sed 's/*//g'
	else
		false
	fi
}

download() {
	mkdir -p "$IB_DIR"
	cd "$IB_DIR"

	echo_blue "=== download ImageBuilder"
	wget "$TARGETS_URL/sha256sums" -O sha256sums
	wget "$TARGETS_URL/sha256sums.gpg" -O sha256sums.asc

	# LEDE Build System (LEDE GnuPG key for unattended build jobs)
	gpg --import "$ROOT_DIR/keys/626471F1.asc"
	echo '54CC74307A2C6DC9CE618269CD84BCED626471F1:6:' | gpg --import-ownertrust
	# LEDE Release Builder (17.01 "Reboot" Signing Key)
	gpg --import $ROOT_DIR/keys/D52BBB6B.asc
	echo 'B09BE781AE8A0CD4702FDCD3833C6010D52BBB6B:6:' | gpg --import-ownertrust

	echo_blue "=== Verifying sha256sums signature"
	gpg --verify sha256sums.asc
	echo_blue "=== Verified sha256sums signature."
	if ! grep -- "$IB" sha256sums > sha256sums.small ; then
		echo_red "=== Can not find $IB file in sha256sums."
		echo_red "=== Is \$IB out of date?"
		false
	fi

	# if missing, outdated or invalid, download again
	if ! sha256sum -c ./sha256sums.small ; then
		local ib_file
		ib_file="$(get_ib_file)"
		echo_blue "=== sha256 doesn't match or ImageBuilder file wasn't downloaded yet."
		echo_blue "=== Downloading a fresh version"
		wget "$TARGETS_URL/$ib_file" -O "$ib_file"
        tar Jxf "$IB_DIR/$ib_file" --strip=1
	fi

	# check again and fail here if the file is still bad
	echo_blue "Checking sha256sum a second time"
	if ! sha256sum -c ./sha256sums.small ; then
		echo_red "=== ImageBuilder can not be verified!"
		false
	fi

    # ability to add custom repositories
    [ -n "$REPO_FILE" ] && [ -f "$REPO_FILE" ] && {
        cp "$REPO_FILE" "$IB_DIR/repositories.conf"
    }

	echo_blue "=== ImageBuilder is up-to-date"

}

die() {
    echo_red $1
    exit 1
}

image() {
    [ -n "$PROFILE" ] || die "missing \$PROFILE"
    # download imagebuilder if not existent or likely outdated
    [ ! -e "$IB_DIR/Makefile" -o -n "$SNAPSHOTS" ] && download

    # run `make image` and pass variables
    (cd "$IB_DIR" &&
    make image \
        PROFILE="$PROFILE" \
        PACKAGES="$PACKAGES" \
        BIN_DIR="$BIN_DIR" \
        EXTRA_IMAGE_NAME="$EXTRA_IMAGE_NAME"
    )
}

package_list() {
    # download imagebuilder if not existent or likely outdated
    [ ! -e "$IB_DIR/Makefile" -o -n "$SNAPSHOTS" ] && download > /dev/null
    (cd "$IB_DIR" && make package_list)
}

info() {
    # download imagebuilder if not existent or likely outdated
    [ ! -e "$IB_DIR/Makefile" -o -n "$SNAPSHOTS" ] && download > /dev/null
    (cd "$IB_DIR" && make info)

}

# check if required vars a given
[ -n "$TARGET" ] || die "missing $\$TARGET"
[ -n "$SUBTARGET" ] || die "missing $\$SUBTARGET"

$@
